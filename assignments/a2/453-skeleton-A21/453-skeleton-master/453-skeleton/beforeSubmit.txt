#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <string>

#include "Geometry.h"
#include "GLDebug.h"
#include "Log.h"
#include "ShaderProgram.h"
#include "Shader.h"
#include "Texture.h"
#include "Window.h"

#include "imgui/imgui.h"
#include "imgui/imgui_impl_glfw.h"
#include "imgui/imgui_impl_opengl3.h"

using namespace std;
using namespace glm;

const static double piApprox = atan(1) * 4;	// pi approximation
const static float MOVEMENT_VALUE = 0.03f;
const static float DIAMOND_LENGTH_SCALE = 0.18f;
const static float DIAMOND_WIDTH_SCALE = 0.18f;
const static int NUMBER_OF_DIAMONDS = 4;

// Used to scale the ship
const static float SHIP_WIDTH_SCALE = 0.18f;
const static float SHIP_LENGTH_SCALE = 0.12f;

struct GameObject
{
	// Struct's constructor deals with the texture.
	// Also sets default position, theta, scale, and transformationMatrix
	GameObject(std::string texturePath, GLenum textureInterpolation) :
		texture(texturePath, textureInterpolation),
		position(0.0f, 0.0f, 0.0f),
		theta(0),
		scale(1, 1),
		transformationMatrix(1.0f) // This constructor sets it as the identity matrix
	{
	}

	CPU_Geometry cgeom;
	GPU_Geometry ggeom;
	Texture texture;

	glm::vec3 position = glm::vec3(0.f, 0.f, 1.f);		// initial position
	float theta;										// Object's total rotation (in degrees)
	// Alternatively, you could represent rotation via a normalized heading vec:
	// glm::vec3 heading;
	glm::vec2 scale;										// Or, alternatively, a float scale;
	glm::mat4 transformationMatrix = mat4(1.0f);
	glm::mat4 transformationTexMatrix;	// not needed (DELETE)
};

/// <summary>
/// Ship's struct
/// </summary>
struct ShipObject
{
	ShipObject(std::string texturePath, GLenum textureInterpolation) :
		gameObj(texturePath, textureInterpolation)
	{}

	GameObject gameObj;
	vec3 facing = glm::vec3(0.f, 1.f, 0.f);		// initial position ship is facing 
	bool moved = false;
};

/// <summary>
/// Diamond's struct
/// </summary>
struct DiamondObject
{
	DiamondObject(std::string texturePath, GLenum textureInterpolation) :
		gameObj(texturePath, textureInterpolation)
	{}
	GameObject gameObj;
	vec2 moveDirection = vec2();
};

/// <summary>
/// Struct that holds the game's data, includes ship, diamonds, current cursor location, and score.
/// </summary>
struct GameData
{
	GameData(ShipObject& s, vector<DiamondObject>& d) :
		ship(s),
		diamonds(d)
	{
	}
	ShipObject& ship;
	vector<DiamondObject>& diamonds;	// Diamond objects
	glm::vec3 previousMouseLoc = glm::vec3(0.f, 0.f, -1.f);	// initially previous mouse location is not existant (debug)
	glm::vec3 currMouseLoc = vec3();						// current mouse location
	int score = 0;
};

// Utility function prototypes
void drawGameObject(ShaderProgram& shader, GameObject& obj);
float convertFromPixelSpace(float pos);
void setGpuGeom(GameObject& obj);
double calcAngle(vec3 shipPos, glm::vec3 initialV3, glm::vec3 finalV3);
float convertToDegree(float radians);
float convertToRad(float degree);
float calcVec3Length(vec3 vec);

// Transformation function prototypes
void rotateAboutObjCenter(GameObject& obj, float degreeOfRotation);
void scaleObj(GameObject& obj, vec2 scale);
void translateObj(GameObject& obj, double deltaX, double deltaY);
void translateObj(GameObject& obj, vec2 translate);

//void moveForward(Window& win, GameObject& obj, float moveBy, vec3& mouseLoc);
//void moveBackward(Window& win, GameObject& obj, float moveBy);

void rotateCCWAboutVec3(glm::vec3& vec3ToRotate, const glm::vec3 rotateAboutVec, const float angleOfRotation);

// CPU_Geometry function protoypes
CPU_Geometry shipGeom(float width, float height);
CPU_Geometry diamondGeom(float width, float height);

// Debug function prototypes
void printVec4Pos(glm::vec4 vec, int vecNum);
void printVec4Pos(glm::vec4 vec);


/// <summary>
/// Tests if a vec3, 'vec3ToTest' is below or above (or on) a line defined by two vec3's, 'initialLineVec' and 'finalLineVec'.
/// INPUT 0 to test above the line, or 1 to test below the line, for parameter 'testAboveOrBelow'.
/// </summary>
/// <param name="initialLineVec"></param>
/// <param name="finalLineVec"></param>
/// <param name="vec3ToTest"></param>
/// <param name="testAboveOrBelow"></param>
/// <returns></returns>
bool isVec3WithinLine(vec3 initialLineVec, vec3 finalLineVec, vec3 vec3ToTest, int testAboveOrBelow)
{
	float slope = (finalLineVec.y - initialLineVec.y) / (finalLineVec.x - initialLineVec.x);
	float yToTest = vec3ToTest.y;

	switch (testAboveOrBelow)
	{
		float y;
	case 0:
		y = slope * (vec3ToTest.x - initialLineVec.x) + initialLineVec.y; // y value associated with x = vec3ToTest.x on the line created by 'initialLineVec' and 'finalLineVec'

		if (yToTest >= y)	// Test if 'yToTest' was above (or on) the line, has to be above 'y'
			return true;	// above the line, return true.
		break;
	case 1:
		y = slope * (vec3ToTest.x - initialLineVec.x) + initialLineVec.y; // y value associated with x = vec3ToTest.x on the line created by 'initialLineVec' and 'finalLineVec'

		if (yToTest <= y)	// Test if 'yToTest' was below (or on) the line, has to be below 'y'
			return true;	// below the line, return true.
		break;
	default:
		cout << "\nInvalid test (choose above (0) or below line (1)." << endl;
	}

	return false;				// return false otherwise.
}

/// <summary>
/// Helper, checks if the diamond GameObject should be collected by the Ship
/// </summary>
/// <param name="diamond"></param>
void checkCollectDiamondHelper(GameData& data, GameObject& diamond)
{
	GameObject& ship = data.ship.gameObj;
	vec3 shipPos = ship.position;
	float halfWidth = (SHIP_WIDTH_SCALE * ship.scale.x) / 2.f;
	float halfLength = (SHIP_LENGTH_SCALE * ship.scale.y) / 2.f;

	// The Box that 'surrounds' the ship, if a diamond is within this box, it is collected.
	std::vector<vec3> shipCollectionBox =
	{
		shipPos + vec3(-halfWidth, -halfLength, 0.f),	// bottom left
		shipPos + vec3(halfWidth, -halfLength, 0.f),	// bottom right
		shipPos + vec3(halfWidth, halfLength, 0.f),		// top right
		shipPos + vec3(-halfWidth, halfLength, 0.f)		// top left
	};

	// rotate the Box such that it 'surrounds' the ship
	for (int i = 0; i < shipCollectionBox.size(); i++)
		rotateCCWAboutVec3(shipCollectionBox[i], shipPos, -(90.f - ship.theta)); // The box is already rotated 90 degrees w/ respect to the x-axis -> actual rotation is 90 - ship.theta

	vec3 diamondPos = diamond.position;
	float dHalfWidth = DIAMOND_WIDTH_SCALE / 2.f;
	float dHalfLen = DIAMOND_LENGTH_SCALE / 2.f;

	// Box that 'surrounds' the Diamond // note: the Box that 'surrounds' the diamond does not need to be rotated like the ship's Box
	std::vector<vec3> diamondBox =
	{
		diamondPos + vec3(-dHalfWidth, -dHalfLen, 0.f),		// bottom left
		diamondPos + vec3(dHalfWidth, -dHalfLen, 0.f),		// bottom right
		diamondPos + vec3(dHalfWidth, dHalfLen, 0.f),		// top right
		diamondPos + vec3(-dHalfWidth, dHalfLen, 0.f)		// top left
	};
	// more accurate shape?
	//std::vector<vec3> diamondBox =
	//{
	//	diamondPos + vec3(0.f, -dHalfLen, 0.f),		// bottom tip of diamond
	//	diamondPos + vec3(dHalfWidth, 0.f, 0.f),		// immediate right of centre
	//	diamondPos + vec3(dHalfWidth, dHalfLen * sin(convertToRad(30.f)), 0.f),	// above immidiate right of centre vec3
	//	diamondPos + vec3(dHalfWidth * cos(convertToRad(60.f)), dHalfLen * sin(convertToRad(60.f)), 0.f),	// top right
	//	diamondPos + vec3(-dHalfWidth * cos(convertToRad(60.f)), dHalfLen * sin(convertToRad(60.f)), 0.f),	// top left
	//	diamondPos + vec3(-dHalfWidth, -dHalfLen * sin(convertToRad(30.f)), 0.f),	// above immidiate left of centre vec3
	//	diamondPos + vec3(-dHalfWidth, 0.f, 0.f),		// immediate left of centre
	//};

	// Checking if the Diamond's Box points are inside the Ship's Collection Box
	// if there is such a point inside the Ship's Collection Box, the diamond is collected.

	float shipRads = convertToRad(ship.theta);
	bool collectDiamond = false;

	// Case 1) Ship's theta is 180 degrees || Ship's theta is 0 degrees
	if (cos(shipRads) == -1.f || cos(shipRads) == 1.f)
	{
		//cout << "--CASE 1" << endl; // debug

		// Case 1.1) Ship's theta is 0 degrees
		if (cos(shipRads) == 1.f)
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool aboveBottomLine = isVec3WithinLine(shipCollectionBox[1], shipCollectionBox[2], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[1] and shipCollectionBox[2]
				bool belowTopLine = isVec3WithinLine(shipCollectionBox[3], shipCollectionBox[0], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[3] and shipCollectionBox[0]
				bool withinYAsymptotes = shipCollectionBox[0].x <= diamondBox[i].x && diamondBox[i].x <= shipCollectionBox[1].x;

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (aboveBottomLine && belowTopLine && withinYAsymptotes)
				{
					cout << "(Case1.1) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
		// Case 1.2) Ship's theta is 180 degrees
		else
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool aboveBottomLine = isVec3WithinLine(shipCollectionBox[3], shipCollectionBox[0], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[0] and shipCollectionBox[3]
				bool belowTopLine = isVec3WithinLine(shipCollectionBox[1], shipCollectionBox[2], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[1] and shipCollectionBox[2]
				bool withinYAsymptotes = shipCollectionBox[0].x <= diamondBox[i].x && diamondBox[i].x <= shipCollectionBox[1].x;

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (aboveBottomLine && belowTopLine && withinYAsymptotes)
				{
					cout << "(Case1.2) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
	}
	// Case 2)  Ship's theta is 90 degrees || Ship's theta is 270 degrees
	else if (sin(shipRads) == -1.f || sin(shipRads) == 1.f)
	{
		//cout << "--CASE 2" << endl; // debug

		// Case 2.1) Ship's theta is 90 degrees
		if (sin(shipRads) == 1.f)
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool aboveBottomLine = isVec3WithinLine(shipCollectionBox[0], shipCollectionBox[1], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[0] and shipCollectionBox[1]
				bool belowTopLine = isVec3WithinLine(shipCollectionBox[2], shipCollectionBox[3], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[2] and shipCollectionBox[3]
				bool withinXAsymptotes = shipCollectionBox[0].x <= diamondBox[i].x && diamondBox[i].x <= shipCollectionBox[1].x;

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (aboveBottomLine && belowTopLine && withinXAsymptotes)
				{
					cout << "(Case2.1) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
		// Case 2.2) Ship's theta is 270 degrees 
		else
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool belowTopLine = isVec3WithinLine(shipCollectionBox[0], shipCollectionBox[1], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[0] and shipCollectionBox[1]
				bool aboveBottomLine = isVec3WithinLine(shipCollectionBox[2], shipCollectionBox[3], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[2] and shipCollectionBox[3]
				bool withinXAsymptotes = shipCollectionBox[0].x <= diamondBox[i].x && diamondBox[i].x <= shipCollectionBox[1].x;

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (aboveBottomLine && belowTopLine && withinXAsymptotes)
				{
					cout << "(Case2.2) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
	}
	// Case 3) Ship's theta is between 0 and 180 degrees (not inclusive)
	else if ((-1.f < cos(shipRads) && cos(shipRads) < 1.f) && (0.f < sin(shipRads) && sin(shipRads) < 1.f))
	{
		//cout << "--CASE 3" << endl; // debug

		// Case 3.1) Ship's theta is between 0 and 90 degrees (not inclusive)
		if (0 < cos(shipRads))
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool aboveBottomLeftLine = isVec3WithinLine(shipCollectionBox[0], shipCollectionBox[1], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[0] and shipCollectionBox[1]
				bool aboveBottomRightLine = isVec3WithinLine(shipCollectionBox[1], shipCollectionBox[2], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[1] and shipCollectionBox[2]
				bool belowTopRightLine = isVec3WithinLine(shipCollectionBox[2], shipCollectionBox[3], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[2] and shipCollectionBox[3]
				bool belowTopLeftLine = isVec3WithinLine(shipCollectionBox[3], shipCollectionBox[0], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[3] and shipCollectionBox[0]

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (aboveBottomLeftLine && aboveBottomRightLine && belowTopRightLine && belowTopLeftLine)
				{
					cout << "(Case3.1) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
		// Case 3.2) Ship's theta is betwwen 90 and 180 degrees (not inclusive)
		else
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool aboveBottomRightLine = isVec3WithinLine(shipCollectionBox[0], shipCollectionBox[1], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[0] and shipCollectionBox[1]
				bool belowTopRightLine = isVec3WithinLine(shipCollectionBox[1], shipCollectionBox[2], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[1] and shipCollectionBox[2]
				bool belowTopLeftLine = isVec3WithinLine(shipCollectionBox[2], shipCollectionBox[3], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[2] and shipCollectionBox[3]
				bool aboveBottomLeftLine = isVec3WithinLine(shipCollectionBox[3], shipCollectionBox[0], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[3] and shipCollectionBox[0]

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (aboveBottomRightLine && belowTopRightLine && belowTopLeftLine && aboveBottomLeftLine)
				{
					cout << "(Case3.2) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
	}
	// Case 4) Ship's theta is between 180 and 360 degrees (not inclusive)
	else
	{
		//cout << "--CASE 4" << endl; // debug
		// Case 4.1) Ship's theta is between 180 and 270 degrees (not inclusive)
		if (cos(shipRads) < 0)
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool belowTopRightLine = isVec3WithinLine(shipCollectionBox[0], shipCollectionBox[1], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[0] and shipCollectionBox[1]
				bool belowTopLeftLine = isVec3WithinLine(shipCollectionBox[1], shipCollectionBox[2], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[1] and shipCollectionBox[2]
				bool aboveBottomLeftLine = isVec3WithinLine(shipCollectionBox[2], shipCollectionBox[3], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[2] and shipCollectionBox[3]
				bool aboveBottomRightLine = isVec3WithinLine(shipCollectionBox[3], shipCollectionBox[0], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[3] and shipCollectionBox[0]

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (belowTopRightLine && belowTopLeftLine && aboveBottomLeftLine && aboveBottomRightLine)
				{
					cout << "(Case4.1) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
		// Case 4.2) Ship's theta is betwwen 270 and 360 degrees (not inclusive)
		else
		{
			for (int i = 0; i < diamondBox.size(); i++)
			{
				bool belowTopLeftLine = isVec3WithinLine(shipCollectionBox[0], shipCollectionBox[1], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[0] and shipCollectionBox[1]
				bool aboveBottomLeftLine = isVec3WithinLine(shipCollectionBox[1], shipCollectionBox[2], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[1] and shipCollectionBox[2]
				bool aboveBottomRightLine = isVec3WithinLine(shipCollectionBox[2], shipCollectionBox[3], diamondBox[i], 0);	// test's if any vec3 of 'diamondBox' is above the line made by shipCollectionBox[2] and shipCollectionBox[3]
				bool belowTopRightLine = isVec3WithinLine(shipCollectionBox[3], shipCollectionBox[0], diamondBox[i], 1);	// test's if any vec3 of 'diamondBox' is below the line made by shipCollectionBox[3] and shipCollectionBox[0]

				// Check if the vec3 of 'diamondBox' is inside the Ship's collection box
				if (belowTopLeftLine && aboveBottomLeftLine && aboveBottomRightLine && belowTopRightLine)
				{
					cout << "(Case4.2) VEC3 IN DIAMOND BOX IS INSIDE SHIP COLLECTION AREA..." << endl; // debug
					collectDiamond = true;
					break;
				}
			}
		}
	}

	if (collectDiamond)
	{
		data.score++;	// increment the score
		// Affectively "removing" the diamond
		diamond.position = vec3(-10.f, -10.f, -10.f);
		diamond.cgeom = CPU_Geometry();
		setGpuGeom(diamond);

		ship.scale += vec2(0.1, 0.1);	// Update the ship's scale
		scaleObj(ship, ship.scale);		// scale the ship
	}
	// Draw the box DEBUG -- prolly need to bring the old CPU, GPU, and shader classes from assignment 1 to do this
	//CPU_Geometry testCPU;
	//GPU_Geometry testGPU;

	//for (int i = 0; i < collectionBox.size(); i++)
	//{
	//	testCPU.verts.push_back(collectionBox[i]);
	//	testCPU.texCoords.push_back(collectionBox[i]);
	//}

	//testGPU.setVerts(testCPU.verts);
	//testGPU.setTexCoords(testCPU.texCoords);

	//shader.use();
	//testGPU.bind();
	////glEnable(GL_FRAMEBUFFER_SRGB);
	////glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	//glDrawArrays(GL_TRIANGLE_FAN, 0, testCPU.verts.size());
}

/// <summary>
/// Checks if any of the diamond GameObjects should be collected by the Ship
/// </summary>
/// <param name="data"></param>
void checkCollectDiamond(GameData& data)
{
	if (!data.ship.moved)	// Don't collect diamonds if the ship hasn't moved
		return;

	// Go through all the diamonds and check if the ship is in range to collect any of them
	for (int i = 0; i < data.diamonds.size(); i++)
		checkCollectDiamondHelper(data, data.diamonds[i].gameObj);
}

/// <summary>
/// Rotates a vec3 CCW by 'degree's, (Use negative degree for clockwise).
/// (Rotates with respect to the origin)
/// </summary>
/// <param name="vecToRotate"></param>
/// <param name="degree"></param>
void rotateVec3(vec3& vecToRotate, float degree)
{
	float x = vecToRotate.x;
	float y = vecToRotate.y;
	float rad = convertToRad(degree);

	float xfinal = x * cos(rad) - y * sin(rad);
	if (abs(xfinal) < 1.0e-6)	// if the x-value is a very small number,
		xfinal = 0.f;			// make xfinal 0
	float yfinal = x * sin(rad) + y * cos(rad);
	if (abs(yfinal) < 1.0e-6)	// if the y-value is a very small number,
		yfinal = 0.f;			// make yfinal 0

	// Set the rotated values
	vecToRotate.x = xfinal;
	vecToRotate.y = yfinal;
}

/// <summary>
/// Checks if the GameObject is within the game window after moving.
/// Return True if the GameOject is within the game window after move, false otherwise.
/// </summary>
/// <param name="win"></param>
/// <param name="obj"></param>
/// <param name="move"></param>
/// <returns></returns>
bool isObjectWithinWindowAfterMove(Window& window, GameObject& obj, vec3 move)
{
	float windowX = convertFromPixelSpace(window.getWidth());
	float windowY = convertFromPixelSpace(window.getHeight());

	float objFuturePosX = obj.position.x + move.x;
	float objFuturePosY = obj.position.y + move.y;

	// Object will go out the screen if moved by 'move' -> return false
	if (objFuturePosY > windowY || objFuturePosY < -windowY)
		return false;
	else if (objFuturePosX > windowX || objFuturePosX < -windowX)
		return false;

	return true;	// otherwise return true
}

class MyCallbacks : public CallbackInterface
{

public:
	MyCallbacks(ShaderProgram& shader, GameData& data, Window& window) :
		shader(shader),
		gameData(data),
		window(window)
	{
	}

	virtual void keyCallback(int key, int scancode, int action, int mods)
	{
		std::cout << "\n---key pressed---" << std::endl;
		cout << "\nShip position (before): " << shipGameObj.position << endl; // debug

		if (key == GLFW_KEY_R && action == GLFW_PRESS)
		{
			shader.recompile();
		}
		else if (key == GLFW_KEY_P && action == GLFW_PRESS)		// restart the game
		{
			startNewGame();
		}
		else if (key == GLFW_KEY_W) //&& action == GLFW_PRESS)
		{
			rotateShipToCursor3();
			//rotateShipToCursor2();
			//rotateShipToCursor(); //?
			moveForward(shipGameObj, MOVEMENT_VALUE, gameData.currMouseLoc);
			//vec3 moveByVec = vec3(MOVEMENT_VALUE, 0.f, 0.f);
			//rotateVec3(moveByVec, shipGameObj.theta);
			ship.moved = true;
			//rotateShipToCursor(); //?
			//rotateShipToCursor2();
			rotateShipToCursor3();


			checkCollectDiamond(gameData);	// check if the ship collects a diamond
		}
		else if (key == GLFW_KEY_S) // && action == GLFW_PRESS)
		{
			rotateShipToCursor3();
			//rotateShipToCursor2();
			//rotateShipToCursor(); //?
			moveBackward(shipGameObj, MOVEMENT_VALUE);
			//vec3 moveByVec = vec3(MOVEMENT_VALUE, 0.f, 0.f);
			//rotateVec3(moveByVec, shipGameObj.theta);
			ship.moved = true;
			//rotateShipToCursor(); //?
			//rotateShipToCursor2();
			rotateShipToCursor3();

			checkCollectDiamond(gameData);	// check if the ship collects a diamond
		}

		// debug
		std::cout << "\n(clip space)\nShip facing: (" << gameData.ship.facing.x << ", " << gameData.ship.facing.y << ")";
		std::cout << "\nMouse pos curr: (" << gameData.currMouseLoc.x << ", " << gameData.currMouseLoc.y << ")" << endl;
		cout << "\nShip position (after): " << shipGameObj.position << endl;

	}

	//void normalize(vec3& vec)
	//{
	//	float length = calcVec3Length(vec);
	//	vec.x = vec.x / length;
	//	vec.y = vec.y / length;
	//	vec.z = vec.z / length;
	//}

	//void rotateShipToCursor(vec3 mousePos)
	//{
	//	vec3 mouseDirection = (mousePos - ship.gameObj.position);
	//}

	virtual void cursorPosCallback(double xpos, double ypos)
	{
		// debug
		//std::cout << "\n(Pixel space)\nMouse pos curr: (" << xpos << ", " << ypos << ")" << std::endl;
		//std::cout << "\n(clip space)\nMouse pos prev: (" << gameData.previousMouseLoc.x << ", " << gameData.previousMouseLoc.y << ")";
		std::cout << "\n(clip space)\nShip facing: (" << gameData.ship.facing.x << ", " << gameData.ship.facing.y << ")";
		std::cout << "\nMouse pos curr: (" << convertFromPixelSpace(xpos) << ", " << -convertFromPixelSpace(ypos) << ")" << endl;
		cout << "\nShip position (before): " << shipGameObj.position << endl; // debug

		// convert pixel space values to clip space values.
		gameData.currMouseLoc = vec3(convertFromPixelSpace(xpos), -convertFromPixelSpace(ypos), 0.f);

		//GameObject& ship = gameData.ship.gameObj;
		rotateShipToCursor3();
		//rotateShipToCursor2();

		//// Find the angle from where the ship is facing and current mouse location (radians)
		//double angle = calcAngle(ship.position, ship.facing, gameData.currMouseLoc);

		//// debug
		//cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f / piApprox) << endl;

		//angle = convertToDegree(angle);

		//ship.theta += angle;								// update the ship's total rotation (about its center)
		//ship.facing = gameData.currMouseLoc;				// update where the ship is facing
		//rotateAboutObjCenter(gameData.ship, angle);	// do rotation of the ship

		gameData.previousMouseLoc = gameData.currMouseLoc;	// set the previous mouse location (debug)

		// debug
		//cout << "\nTotal ship angle (radians) = " << convertToRad(ship.theta) << " (degree) = " << ship.theta;
		cout << "\nShip position (after): " << shipGameObj.position << endl; // debug


		// NEW-- this tut example puts the ship to the cursor pos.
		// convert to clip space
		//std::cout << "\n(clip space)\nMouse pos curr: (" << convertFromPixelSpace(xpos) << ", " << -convertFromPixelSpace(ypos) << ")" << endl;

		//mousePos.x = convertFromPixelSpace(xpos);
		//mousePos.y = -convertFromPixelSpace(ypos);

		//GameObject& ship = gameData.ship;
		//ship.transformationMatrix = translate(mat4(1.f), mousePos - ship.position) * ship.transformationMatrix;
		//ship.position = mousePos;
		checkCollectDiamond(gameData);	// check if the ship collects a diamond
	}

private:
	ShaderProgram& shader;
	GameData& gameData;
	Window& window;
	ShipObject& ship = gameData.ship;
	GameObject& shipGameObj = gameData.ship.gameObj;

	void startNewGame()
	{
		// Reset Ship's data
		//ShipObject& ship = gameData.ship;
		ship.moved = false;
		ship.facing = vec3(0.f, 1.f, 0.f);				// looking 'up'
		ship.gameObj.cgeom = shipGeom(SHIP_WIDTH_SCALE, SHIP_LENGTH_SCALE);	// Create new ship cpuGeom
		ship.gameObj.position = vec3(0.f, 0.f, 1.f);
		ship.gameObj.theta = 90.f;						// looking 'up' -> 90 degrees
		ship.gameObj.transformationMatrix = mat4(1.0f);
		ship.gameObj.scale = vec2(1.f, 1.f);
		vec2 shipScale(0.09f, 0.06f);
		scaleObj(ship.gameObj, shipScale);
		setGpuGeom(ship.gameObj);

		// Reset Diamonds data
		vector<DiamondObject>& diamonds = gameData.diamonds;
		for (int i = 0; i < NUMBER_OF_DIAMONDS; i++)
		{
			diamonds[i].gameObj.theta = 90.f;
			diamonds[i].gameObj.cgeom = diamondGeom(0.14f, 0.14f);		// Create new diamond cpuGeom
			diamonds[i].gameObj.position = vec3(0.f, 0.f, 1.f);			// reset position
			diamonds[i].gameObj.transformationMatrix = mat4(1.0f);
			scaleObj(diamonds[i].gameObj, vec2(0.07, 0.07));			// scale 
			setGpuGeom(diamonds[i].gameObj);							
		}

		translateObj(diamonds[0].gameObj, -0.5f, -0.5f);	// bottom left
		translateObj(diamonds[1].gameObj, 0.5f, 0.5f);		// top right
		translateObj(diamonds[2].gameObj, -0.5f, 0.5f);		// top left
		translateObj(diamonds[3].gameObj, 0.5f, -0.5f);		// bottom right

		// Direction vectors are kept, so no need to set them again

		gameData.score = 0;
	}

	/// <summary>
	/// Rotates a glm::vec3 about another glm::vec3 by "degreeOfRot"
	/// </summary>
	/// <param name="vecToRotate"></param>
	/// <param name="rotateAbout"></param>
	/// <param name="degreeOfRot"></param>
	void rotateV3AboutV3(vec3& vecToRotate, vec3 rotateAbout, float degreeOfRot)
	{
		vecToRotate = vecToRotate - rotateAbout;
		degreeOfRot = convertToRad(degreeOfRot);

		float newX = vecToRotate.x * cos(degreeOfRot) - vecToRotate.y * sin(degreeOfRot);
		float newY = vecToRotate.x * sin(degreeOfRot) + vecToRotate.y * cos(degreeOfRot);

		vecToRotate.x = newX;
		vecToRotate.y = newY;
		vecToRotate = vecToRotate + rotateAbout;
	}

	void rotateShipToCursor3()
	{
		vec3 facing = shipGameObj.position + vec3(1.f, 0.f, 0.f);
		rotateV3AboutV3(facing, shipGameObj.position, shipGameObj.theta);

		// Find the angle from where the ship is facing and current mouse location (radians)
		float angle = calcAngle(shipGameObj.position, facing, gameData.currMouseLoc);

		// debug
		cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f / piApprox) << endl;

		angle = convertToDegree(angle);

		shipGameObj.theta += angle;							// update the ship's total rotation (about its center)
		rotateAboutObjCenter(shipGameObj, angle);			// do rotation of the ship

		// debug
		cout << "\nship facing (updated): (" << gameData.ship.facing.x << ", " << gameData.ship.facing.y << ")";
		cout << "\nship total rotation (updated): " << shipGameObj.theta;

	}

	/// <summary>
	/// (Moves Ship object)
	/// Move's the object by 'moveBy' forwards.
	/// If the object is within 'epsilon' of the mouse cursor, the ship does not move.
	/// </summary>
	/// <param name="obj"></param>
	/// <param name="moveBy"></param>
	/// <param name="mouseLoc"></param>
	void moveForward(GameObject& obj, float moveBy, vec3& mouseLoc)
	{
		vec3 moveByVec = vec3(moveBy, 0.f, 0.f);	// set the moveBy value along the x-axis
		rotateVec3(moveByVec, obj.theta);			// rotate moveByVec by the objects 'theta'

		// Check if the ship moving forward will cross the mouse location
		vec3 futurePos = obj.position + moveByVec;
		float vecLen = calcVec3Length(futurePos - mouseLoc);
		bool withinEpsilon = vecLen <= MOVEMENT_VALUE;

		if (withinEpsilon)	// If within epsilon, don't move the ship
		{
			cout << "\nwithin epsilon, did not move up" << endl;	// debug
			return;
		}

		bool withinWindow = isObjectWithinWindowAfterMove(window, obj, moveByVec);

		// If the object moves by 'moveByVec' and it goes outside the window, don't move
		if (!withinWindow)
			return;

		obj.position += moveByVec;					// update position
		obj.transformationMatrix = translate(mat4(1.f), moveByVec) * obj.transformationMatrix;
	}

	/// <summary>
	/// (Moves Ship object)
	/// Move's the object by 'moveBy' amount backwards.
	/// </summary>
	/// <param name="obj"></param>
	/// <param name="moveBy"></param>
	void moveBackward(GameObject& obj, float moveBy)
	{
		vec3 moveByVec = vec3(-moveBy, 0.f, 0.f);	// set the moveBy value along the x-axis
		rotateVec3(moveByVec, obj.theta);			// rotate moveByVec by the objects 'theta'

		bool withinWindow = isObjectWithinWindowAfterMove(window, obj, moveByVec);

		// If the object moves by 'moveByVec' and it goes outside the window, don't move
		if (!withinWindow)
			return;

		obj.position += moveByVec;					// update position
		//obj.facing -= moveByVec;	// ?
		obj.transformationMatrix = translate(mat4(1.f), moveByVec) * obj.transformationMatrix;
	}
};


CPU_Geometry shipGeom(float width, float height)
{
	float halfWidth = width / 2.0f;
	float halfHeight = height / 2.0f;
	CPU_Geometry retGeom;
	// vertices for the spaceship quad
	//retGeom.verts.push_back(glm::vec3(-halfWidth, halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(-halfWidth, -halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(halfWidth, -halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(-halfWidth, halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(halfWidth, -halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(halfWidth, halfHeight, 0.f));

	// For full marks (Part IV), you'll need to use the following vertex coordinates instead.
	// Then, you'd get the correct scale/translation/rotation by passing in uniforms into
	// the vertex shader.
	retGeom.verts.push_back(glm::vec3(-1.f, 1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(-1.f, -1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(1.f, -1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(-1.f, 1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(1.f, -1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(1.f, 1.f, 0.f));
	

	// texture coordinates
	retGeom.texCoords.push_back(glm::vec2(0.f, 1.f));
	retGeom.texCoords.push_back(glm::vec2(0.f, 0.f));
	retGeom.texCoords.push_back(glm::vec2(1.f, 0.f));
	retGeom.texCoords.push_back(glm::vec2(0.f, 1.f));
	retGeom.texCoords.push_back(glm::vec2(1.f, 0.f));
	retGeom.texCoords.push_back(glm::vec2(1.f, 1.f));
	return retGeom;
}

CPU_Geometry diamondGeom(float width, float height)
{
	float halfWidth = width / 2.0f;
	float halfHeight = height / 2.0f;
	CPU_Geometry retGeom;

	//retGeom.verts.push_back(glm::vec3(-halfWidth, halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(-halfWidth, -halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(halfWidth, -halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(-halfWidth, halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(halfWidth, -halfHeight, 0.f));
	//retGeom.verts.push_back(glm::vec3(halfWidth, halfHeight, 0.f));

	// For full marks (Part IV), you'll need to use the following vertex coordinates instead.
	// Then, you'd get the correct scale/translation/rotation by passing in uniforms into
	// the vertex shader.
	
	retGeom.verts.push_back(glm::vec3(-1.f, 1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(-1.f, -1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(1.f, -1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(-1.f, 1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(1.f, -1.f, 0.f));
	retGeom.verts.push_back(glm::vec3(1.f, 1.f, 0.f));
	

	// texture coordinates
	retGeom.texCoords.push_back(glm::vec2(0.f, 1.f));
	retGeom.texCoords.push_back(glm::vec2(0.f, 0.f));
	retGeom.texCoords.push_back(glm::vec2(1.f, 0.f));
	retGeom.texCoords.push_back(glm::vec2(0.f, 1.f));
	retGeom.texCoords.push_back(glm::vec2(1.f, 0.f));
	retGeom.texCoords.push_back(glm::vec2(1.f, 1.f));

	return retGeom;
}

int main() {
	Log::debug("Starting main");

	// debug
	double angle = calcAngle(vec3(0.f), glm::vec3(9.f, 2.f, 1.f), glm::vec3(2.f, 6.f, 1.f)); // expected value is 59.0362 degrees (returns in rads)
	cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f/piApprox)  << endl;
	angle = calcAngle(vec3(0.f), glm::vec3(convertFromPixelSpace(800.f), 0.f, 1.f), glm::vec3(0.f, convertFromPixelSpace(800.f), 1.f));	// 90 degrees
	cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f / piApprox) << endl;
	angle = calcAngle(vec3(0.f), glm::vec3(0.f, convertFromPixelSpace(800.f), 1.f), glm::vec3(convertFromPixelSpace(800.f), 0.f, 1.f));	// -90 degrees
	cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f / piApprox) << endl;
	angle = calcAngle(vec3(0.f), vec3(0.7775f, -0.04f, 0.f), vec3(0.78, -0.04, 0.f));								// 0 degrees
	cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f / piApprox) << endl;
	angle = calcAngle(vec3(0.f), vec3(-0.0025f, -0.f, 0.f), vec3(0.f, -0.f, 0.f));									// 0 degrees
	cout << "\nAngle calculated (radians) = " << angle << " (degree) = " << angle * (180.f / piApprox) << endl;

	// WINDOW
	glfwInit();
	Window window(800, 800, "CPSC 453"); // can set callbacks at construction if desired
	GLDebug::enable();

	// SHADERS
	ShaderProgram shader("shaders/test.vert", "shaders/test.frag");
	
	// GL_NEAREST looks a bit better for low-res pixel art than GL_LINEAR.
	// But for most other cases, you'd want GL_LINEAR interpolation.
	//GameObject ship("textures/ship.png", GL_NEAREST);
	//ship.cgeom = shipGeom(SHIP_WIDTH_SCALE, SHIP_LENGTH_SCALE);	// Create ship cpuGeom
	//ship.theta = 90.f;	// facing 'up', top of the screen

	ShipObject ship("textures/ship.png", GL_NEAREST);
	ship.gameObj.cgeom = shipGeom(SHIP_WIDTH_SCALE, SHIP_LENGTH_SCALE);	// Create ship cpuGeom
	ship.gameObj.theta = 90.f;	// facing 'up', top of the screen
	vec2 shipScale(0.09f, 0.06f);
	scaleObj(ship.gameObj, shipScale);
	translateObj(ship.gameObj, 0.f, 0.f);	// Center of the screen
	setGpuGeom(ship.gameObj);

	// Create Diamonds
	vector<DiamondObject> diamonds;
	for (int i = 0; i < 4; i++)
	{
		diamonds.push_back(DiamondObject("textures/diamond.png", GL_NEAREST));
		diamonds[i].gameObj.cgeom = diamondGeom(0.14f, 0.14f);
		scaleObj(diamonds[i].gameObj, vec2(0.07, 0.07));
		setGpuGeom(diamonds[i].gameObj);
	}
	// moving diamonds into position
	translateObj(diamonds[0].gameObj, -0.5f, -0.5f);	// bottom left
	translateObj(diamonds[1].gameObj, 0.5f, -0.5f);		// bottom right
	translateObj(diamonds[2].gameObj, 0.5f, 0.5f);		// top right
	translateObj(diamonds[3].gameObj, -0.5f, 0.5f);		// top left

	// giving them their direction vec2's
	diamonds[0].moveDirection = vec2(-0.001, -0.002);
	diamonds[1].moveDirection = vec2(0.0052, 0.0007);
	diamonds[2].moveDirection = vec2(0.001, 0.0002);
	diamonds[3].moveDirection = vec2(-0.002, 0.002);

	//float score = 0;
	GameData newData = {ship, diamonds};

	// CALLBACKS
	window.setCallbacks(std::make_shared<MyCallbacks>(shader, newData, window)); // can also update callbacks to new ones
	

	//d0.cgeom = diamondGeom(0.14f, 0.14f);
	//d1.cgeom = diamondGeom(0.14f, 0.14f);
	//d2.cgeom = diamondGeom(0.14f, 0.14f);
	//d3.cgeom = diamondGeom(0.14f, 0.14f);
	// Put the GameObjects in their starting locations
	// if i have translate above the scale, the scale will be applied to the transformation values
	//scaleObj(ship, 0.09f, 0.06f);
	//vec2 shipScale(0.09f, 0.06f);
	//scaleObj(ship, shipScale);
	//translateObj(ship, 0.f, 0.f);	// Center of the screen

	//vec2 diamondScale(0.07, 0.07);
	//scaleObj(d0, diamondScale);
	//scaleObj(d1, diamondScale);
	//scaleObj(d2, diamondScale);
	//scaleObj(d3, diamondScale);

	// Translate diamonds
	//translateObj(d0, -0.5f, -0.5f);	// bottom left
	//translateObj(d1, 0.5f, 0.5f);		// top right
	//translateObj(d2, -0.5f, 0.5f);	// top left
	//translateObj(d3, 0.5f, -0.5f);	// bottom right


	// Set gpu geoms
	//setGpuGeom(d0);
	//setGpuGeom(d1);
	//setGpuGeom(d2);
	//setGpuGeom(d3);

	//obj.ggeom.setVerts(obj.cgeom.verts);
	//obj.ggeom.setTexCoords(obj.cgeom.texCoords);

	// RENDER LOOP
	while (!window.shouldClose()) {
		int score;
		glfwPollEvents();
		checkCollectDiamond(newData);	// after the player moves/rotates, check if the ship is able to collect any diamonds

		shader.use();

		// from  tutorial
		//GLint shaderLoc = glGetUniformLocation(shader.getID(), "transformationMatrix"); // need to define 'getID()' in shaderprogram file
		//glUniformMatrix4fv(shaderLoc, 1, GL_FALSE, &rotation0[0][0]);
		//--

		glEnable(GL_FRAMEBUFFER_SRGB);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	// note to self: if i have this in between drawing objects, it will remove all previous ones.

		// Draw ship
		//ship.ggeom.bind();
		//ship.texture.bind();
		//glDrawArrays(GL_TRIANGLES, 0, 6);
		//ship.texture.unbind();
		drawGameObject(shader, ship.gameObj);

		// Draw Diamonds
		//shader.use();
		//d0.ggeom.bind();
		//d0.texture.bind();
		//glDrawArrays(GL_TRIANGLES, 0, 6);
		//d0.texture.unbind();

		// Move the diamonds along their direction
		for (int i = 0; i < diamonds.size(); i++)
		{
			bool within = isObjectWithinWindowAfterMove(window, diamonds[i].gameObj, vec3(diamonds[i].moveDirection, 0.f));
			if (!within)	// turn the object around if it moves outside of window
				diamonds[i].moveDirection = -diamonds[i].moveDirection;
			translateObj(diamonds[i].gameObj, diamonds[i].moveDirection);
		}

		// Draw the diamonds
		for (int i = 0; i < diamonds.size(); i++)
			drawGameObject(shader, diamonds[i].gameObj);
		//drawGameObject(shader, d0);
		//drawGameObject(shader, d1);
		//drawGameObject(shader, d2);
		//drawGameObject(shader, d3);

		checkCollectDiamond(newData);	// after the diamonds move and the player moves/rotates, check if the ship is able to collect any diamonds

		glDisable(GL_FRAMEBUFFER_SRGB); // disable sRGB for things like imgui

		// Starting the new ImGui frame
		ImGui_ImplOpenGL3_NewFrame();
		ImGui_ImplGlfw_NewFrame();
		ImGui::NewFrame();
		// Putting the text-containing window in the top-left of the screen.
		ImGui::SetNextWindowPos(ImVec2(5, 5));

		// Setting flags
		ImGuiWindowFlags textWindowFlags =
			ImGuiWindowFlags_NoMove |				// text "window" should not move
			ImGuiWindowFlags_NoResize |				// should not resize
			ImGuiWindowFlags_NoCollapse |			// should not collapse
			ImGuiWindowFlags_NoSavedSettings |		// don't want saved settings mucking things up
			ImGuiWindowFlags_AlwaysAutoResize |		// window should auto-resize to fit the text
			ImGuiWindowFlags_NoBackground |			// window should be transparent; only the text should be visible
			ImGuiWindowFlags_NoDecoration |			// no decoration; only the text should be visible
			ImGuiWindowFlags_NoTitleBar;			// no title; only the text should be visible

		// Begin a new window with these flags. (bool *)0 is the "default" value for its argument.
		ImGui::Begin("scoreText", (bool*)0, textWindowFlags);

		// Scale up text a little, and set its value
		ImGui::SetWindowFontScale(1.5f);

		// Checking if the player has collected all the diamonds
		if (newData.score < diamonds.size())
			ImGui::Text("Score: %d", newData.score);	// Second parameter gets passed into "%d"
		else
			ImGui::Text("Score: %d | You Win! Press [P] to play again!", newData.score);

		// End the window.
		ImGui::End();

		ImGui::Render();	// Render the ImGui window
		ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData()); // Some middleware thing

		window.swapBuffers();
	}
	// ImGui cleanup
	ImGui_ImplOpenGL3_Shutdown();
	ImGui_ImplGlfw_Shutdown();
	ImGui::DestroyContext();

	glfwTerminate();
	return 0;
}

void drawGameObject(ShaderProgram& shader, GameObject& obj)
{
	//setGpuGeom(obj); // not needed, prolly
	shader.use();

	shader.setMat4Transform("transformationMatrix", obj.transformationMatrix);
	shader.setMat4TextureTransform("transformationMatrixTexture", obj.transformationTexMatrix);

	obj.ggeom.bind();
	obj.texture.bind();
	//glDrawArrays(GL_TRIANGLES, 0, 6);
	glDrawArrays(GL_TRIANGLES, 0, obj.cgeom.verts.size());
	obj.texture.unbind();
}

/// <summary>
/// Converts values from pixel space to clip space
/// </summary>
/// <param name="pos"></param>
/// <returns></returns>
float convertFromPixelSpace(float pos)
{
	float clipPos = pos / (800 / 2.f);
	clipPos = clipPos - 1;
	return clipPos;
}

void setGpuGeom(GameObject& obj)
{
	obj.ggeom.setVerts(obj.cgeom.verts);
	obj.ggeom.setTexCoords(obj.cgeom.texCoords);
}

/// </summary>
/// <param name="vec3ToRotate"> the glm::vec3 to be rotated.</param>
/// <param name="rotateAboutVec"> a const glm::vec3 that will be rotated about.</param>
/// <param name="angleOfRotation"> the angle to rotate 'vec3ToRotate' about 'rotateAboutVec', in degree's. </param>
void rotateCCWAboutVec3(glm::vec3& vec3ToRotate, const glm::vec3 rotateAboutVec, const float angleOfRotation)
{
	// To rotate 'vec3ToRotate' around 'rotateAboutVec' I'll do these steps:
	// 1) Translate 'vec3ToRotate's x and y values by 'translateByX' and 'translateByY' respectively, getting x' and y'.
	// 2) Rotate the translated x' and y' by 'degree', getting x'' and y''.
	// 3) Translate x'' and y'' by the inverse of 'translateByX' and 'translateByY' (subtract). The result will be the rotated 'vec3ToRotate' about 'rotateAboutVec'.

	// Convert 'degree' into radians
	float rads = convertToRad(angleOfRotation);

	// get x and y values that would translate 'rotateAboutVec' to origin
	float translateByX = -rotateAboutVec.x;
	float translateByY = -rotateAboutVec.y;

	// Calculate the final x and y coordinates using the steps described above. (Note: The steps above have been merged into one 'step')
	float originalX = vec3ToRotate.x;
	float originalY = vec3ToRotate.y;
	float finalX = (originalX * cos(rads)) - (originalY * sin(rads)) + (translateByX * cos(rads) - translateByY * sin(rads) - translateByX);
	float finalY = (originalX * sin(rads)) + (originalY * cos(rads)) + (translateByX * sin(rads) + translateByY * cos(rads) - translateByY);

	// Set the x and y values.
	vec3ToRotate.x = finalX;
	vec3ToRotate.y = finalY;
}

/// <summary>
/// Returns the angle in radians. Ensure initalV3 and finalV3's values are in clip space.
/// </summary>
/// <param name="shipPos"></param>
/// <param name="initialV3"></param>
/// <param name="finalV3"></param>
/// <returns></returns>
double calcAngle(vec3 shipPos, glm::vec3 initialV3, glm::vec3 finalV3)
{
	// translate the ship pos to origin and translate initial and final vec3 by -ship pos.
	vec3 translateBack = shipPos;
	vec3 translateToOrigin = -shipPos;
	initialV3 = initialV3 + translateToOrigin;
	finalV3 = finalV3 + translateToOrigin;

	//float dotProuct = (initialV3.x * finalV3.x) + (initialV3.y * finalV3.y) + (initialV3.z * finalV3.z);
	double dotProuct = (initialV3.x * finalV3.x) + (initialV3.y * finalV3.y);

	float initialV3Length = calcVec3Length(initialV3);
	float finalV3Length = calcVec3Length(finalV3);
	//float squareInitialX = initialV3.x * initialV3.x;
	//float squareInitialY = initialV3.y * initialV3.y;
	////float squareInitialZ = initialV3.z * initialV3.z;

	//float squareFinalX = finalV3.x * finalV3.x;
	//float squareFinalY = finalV3.y * finalV3.y;
	////float squareFinalZ = finalV3.z * finalV3.z;

	////float initialV3Length = sqrt(squareInitialX + squareInitialY + squareInitialZ);
	//float initialV3Length = sqrt(squareInitialX + squareInitialY);
	////float finalV3Length = sqrt(squareFinalX + squareFinalY + squareFinalZ);
	//float finalV3Length = sqrt(squareFinalX + squareFinalY);

	// if the length of one of the vectors is 0, return angle = 0. -> error when we divide by 0.
	if (initialV3Length * finalV3Length == 0)
		return 0.0;

	double calc = dotProuct / (initialV3Length * finalV3Length);

	// 'calc' is out of arccos range of [-1, 1], so return with angle = 0. acos(calc) = -nan(ind) if 'calc' is not within [-1, 1].
	if (calc > 1 || calc < -1)
		return 0.0;

	double angle = acos(calc);
	
	// Translate back relative to ship position
	finalV3 = finalV3 + translateBack;
	initialV3 = initialV3 + translateBack;

	// Determining if the angle is negative/positive
	vec3 crossProduct = cross(initialV3, finalV3);
	if (crossProduct.z < 0)	// if the cross product of initalV3 and finalV3 z-value is < 0, initalV3 to finalV3 is clockwise -> negative angle.
		angle = -angle;

	// debug
	//cout << "\nAngle calculted (radians) = " << angle << " (degree) = " << angle * (180.f/piApprox)  << endl;
	return angle;
}

/// <summary>
/// Works fine atm
/// -> oct. 16 update, it may not be working right, just play around with moving while also moving the mouse you'll see the bug
/// </summary>
/// <param name="obj"></param>
/// <param name="degreeOfRotation"> in degrees, a float.</param>
void rotateAboutObjCenter(GameObject& obj, float degreeOfRotation)
{
	mat4 translateToOrigin = glm::translate(mat4(1.0f), -obj.position);	// Used to translate all the object's vec3 verts by -Position (Position should be at origin)
	mat4 translateBack = glm::translate(glm::mat4(1.0f), obj.position); // Used to translate all the object's vec3 verts by Position (back to original positions)

	glm::mat4 identity = glm::mat4(1.0f);					// identity matrix for transformations (4x4)
	float angle = glm::radians(degreeOfRotation);			// angle of rotation (converts degree to radians)
	glm::vec3 axisOfRotation = glm::vec3(0.0f, 0.0f, 1.0f);	// axis of rotation is z-axis.

	glm::mat4 rotateMatrix = glm::rotate(identity, angle, axisOfRotation);	// transformation matrix.

	// 1. translate by -Position (Position should be (0,0,0) after)
	// 2. do rotation
	// 3. translate by Position (back to original position)
	obj.transformationMatrix = translateBack * rotateMatrix * translateToOrigin * obj.transformationMatrix;	// resulting matrix of all those transformations
}

void translateObj(GameObject& obj, vec2 translate)
{
	translateObj(obj, translate.x, translate.y);
}

void translateObj(GameObject& obj, double deltaX, double deltaY)
{
	// currently works when moving striahgt up/down
	// need to consider when ship is angled... need to rotate that translation vector and then apply the translation.
	// prolly need a way to save the angle of the ship

	vec3 translationVec = vec3(deltaX, deltaY, 0.f);

	// need to rotate the translationVec about the obj.theta (find code in a1, or recode it)

	obj.position = obj.position + translationVec;	// Update the object's position
	//obj.facing = obj.facing + translationVec; 		// Update where the object is facing

	// Create translation matrix
	//mat4 translationMatrix = glm::translate(glm::mat4(1.0f), glm::vec3(deltaX, deltaY, 0.f));
	mat4 translationMatrix = glm::translate(mat4(1.f), translationVec);
	//translationMatrix[3] = vec4(obj.position, 1.f);	// edit the translation

	// Update the transformation matrix
	obj.transformationMatrix = translationMatrix * obj.transformationMatrix; // update the transformation matrix
}

/// <summary>
/// Scale's the 'obj' by 'scale'
/// </summary>
/// <param name="obj"></param>
/// <param name="scale"></param>
void scaleObj(GameObject& obj, vec2 scale)
{
	vec3 scaleCenter = obj.position;
	mat4 scaleMatrix = glm::scale(glm::mat4(1.0f), glm::vec3(scale, 1.f));
	mat4 translateToOrigin = glm::translate(glm::mat4(1.0f), -obj.position);
	mat4 translateBack = glm::translate(glm::mat4(1.0f), obj.position);

	// Translate object to 'scaleCenter', obj's position
	// then do scaling,
	// after, translate back
	obj.transformationMatrix = translateBack * scaleMatrix * translateToOrigin * obj.transformationMatrix;
}

/// <summary>
/// Calculates the length of a vec3. Ignores z value
/// </summary>
/// <param name="vec"></param>
/// <returns></returns>
float calcVec3Length(vec3 vec)
{
	float squareX = vec.x * vec.x;
	float squareY = vec.y * vec.y;
	return sqrt(squareX + squareY);
}

/// <summary>
/// Converts from radians to degrees.
/// </summary>
/// <param name="radians"></param>
/// <returns></returns>
float convertToDegree(float radians)
{
	return radians * (180.f / piApprox);	// convert to degrees
}

/// <summary>
/// Converts from degree to radians.
/// </summary>
/// <param name="degree"></param> 
/// <returns></returns>
float convertToRad(float degree)
{
	return degree * (piApprox / 180.f);		// convert to radians
}

/// <summary>
/// Prints the position of the 'vec4', x, y, z, w coordinates.
/// </summary>
/// <param name="vec"> the glm::vec4's position to be printed. </param>
/// <param name="vecNum"> an int, a number identifier, default is -1. </param>
void printVec4Pos(glm::vec4 vec, int vecNum)
{
	std::cout << "vec4 #" << vecNum << " @ (" << vec.x << ", " << vec.y << ", " << vec.z << ", " << vec.w << ")" << std::endl;
}

/// <summary>
/// Prints the position of the 'vec4', x, y, z, w coordinates.
/// </summary>
/// <param name="vec"> the glm::vec4's position to be printed. </param>
/// <param name="vecNum"> an int, a number identifier, default is -1. </param>
void printVec4Pos(glm::vec4 vec)
{
	printVec4Pos(vec, -1);
}
